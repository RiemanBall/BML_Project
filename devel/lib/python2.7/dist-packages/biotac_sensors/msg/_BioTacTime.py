"""autogenerated by genpy from biotac_sensors/BioTacTime.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class BioTacTime(genpy.Message):
  _md5sum = "f8d8b5e140ed0958883d472dc8acc1dc"
  _type = "biotac_sensors/BioTacTime"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time frame_start_time
time frame_end_time
uint32 tdc_ns_offset
uint32 tac_ns_offset
uint32 pdc_ns_offset
uint32[22] pac_ns_offset
uint32[19] electrode_ns_offset

"""
  __slots__ = ['frame_start_time','frame_end_time','tdc_ns_offset','tac_ns_offset','pdc_ns_offset','pac_ns_offset','electrode_ns_offset']
  _slot_types = ['time','time','uint32','uint32','uint32','uint32[22]','uint32[19]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_start_time,frame_end_time,tdc_ns_offset,tac_ns_offset,pdc_ns_offset,pac_ns_offset,electrode_ns_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BioTacTime, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame_start_time is None:
        self.frame_start_time = genpy.Time()
      if self.frame_end_time is None:
        self.frame_end_time = genpy.Time()
      if self.tdc_ns_offset is None:
        self.tdc_ns_offset = 0
      if self.tac_ns_offset is None:
        self.tac_ns_offset = 0
      if self.pdc_ns_offset is None:
        self.pdc_ns_offset = 0
      if self.pac_ns_offset is None:
        self.pac_ns_offset = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.electrode_ns_offset is None:
        self.electrode_ns_offset = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    else:
      self.frame_start_time = genpy.Time()
      self.frame_end_time = genpy.Time()
      self.tdc_ns_offset = 0
      self.tac_ns_offset = 0
      self.pdc_ns_offset = 0
      self.pac_ns_offset = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.electrode_ns_offset = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7I.pack(_x.frame_start_time.secs, _x.frame_start_time.nsecs, _x.frame_end_time.secs, _x.frame_end_time.nsecs, _x.tdc_ns_offset, _x.tac_ns_offset, _x.pdc_ns_offset))
      buff.write(_struct_22I.pack(*self.pac_ns_offset))
      buff.write(_struct_19I.pack(*self.electrode_ns_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.frame_start_time is None:
        self.frame_start_time = genpy.Time()
      if self.frame_end_time is None:
        self.frame_end_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.frame_start_time.secs, _x.frame_start_time.nsecs, _x.frame_end_time.secs, _x.frame_end_time.nsecs, _x.tdc_ns_offset, _x.tac_ns_offset, _x.pdc_ns_offset,) = _struct_7I.unpack(str[start:end])
      start = end
      end += 88
      self.pac_ns_offset = _struct_22I.unpack(str[start:end])
      start = end
      end += 76
      self.electrode_ns_offset = _struct_19I.unpack(str[start:end])
      self.frame_start_time.canon()
      self.frame_end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7I.pack(_x.frame_start_time.secs, _x.frame_start_time.nsecs, _x.frame_end_time.secs, _x.frame_end_time.nsecs, _x.tdc_ns_offset, _x.tac_ns_offset, _x.pdc_ns_offset))
      buff.write(self.pac_ns_offset.tostring())
      buff.write(self.electrode_ns_offset.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.frame_start_time is None:
        self.frame_start_time = genpy.Time()
      if self.frame_end_time is None:
        self.frame_end_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.frame_start_time.secs, _x.frame_start_time.nsecs, _x.frame_end_time.secs, _x.frame_end_time.nsecs, _x.tdc_ns_offset, _x.tac_ns_offset, _x.pdc_ns_offset,) = _struct_7I.unpack(str[start:end])
      start = end
      end += 88
      self.pac_ns_offset = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=22)
      start = end
      end += 76
      self.electrode_ns_offset = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=19)
      self.frame_start_time.canon()
      self.frame_end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_19I = struct.Struct("<19I")
_struct_22I = struct.Struct("<22I")
_struct_7I = struct.Struct("<7I")
